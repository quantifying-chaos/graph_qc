text_logistic = """lambda
0.5000000000
0.8064950000
0.8740672853
0.8884939520
0.8916231352
0.8923017565
0.8924462013
0.8924778140
0.8924845434
0.8924860157
0.8924863310
0.8924863990
0.8924864139
0.8924864171
0.8924864178
0.8924864179
length: 16
di
0.3064950000
0.1151528380
0.0452935060
0.0179909169
0.0071877579
0.0028536996
0.0011405848
0.0004527580
0.0001807550
0.0000719659
0.0000285281
0.0000113672
0.0000045233
0.0000017963
0.0000007128
length: 15
alpha
4.5358092997
4.6838460230
4.6103617168
4.6110890246
4.6981361800
4.5692030565
4.6976886127
4.5707037850
4.6690000000
4.6410832897
4.5599414736
4.6418936559
4.6286915064
4.6027721102
length: 14
delta
2.6616365278
2.5423697165
2.5175763063
2.5029942863
2.5187506567
2.5019617749
2.5191930664
2.5048153706
2.5116759261
2.5226365150
2.5096745464
2.5130534587
2.5181104605
2.5201147995
length: 14"""

text_logistic_skewed = """
lambda
2.2500000000000000000000000000000000000000000000000000000000000000
4.4932574999999998576123184934605347962133237160742282867431640625
5.1193567717926749838215542693067452576949521666891864111500927225
5.2612521750991911311365805179294443195081544731601410325472899171
5.2920754333077828532127289465085114156509419095178501875064278957
5.2987002635001552780789217877449480669016495569688349669855972784
5.3001209632926812748015832628100534264030255297252436728783423156
5.3004259693385612519801371283935168046252147073421044806005762088
5.3004912644125946152158385902800238170452904471258787941754285087
5.3005053067859536865590328248651598207938272620658911524744130328
5.3005083205124543072573794256237158528283452471500754214921294203
5.3005089661913762651354959092184040602196042850473570265919138181
5.3005091046784242113852911585462500065262782310736274906112706699
5.3005091344698389556948846451071939483755061334108625599496504760
5.3005091408754391938004761857323865418736142266243531876523571477
5.3005091422484568332678808266604049537645090744264265039071561686
length: 16
di
0.3323344444444444233207398071212108132209762687948011383083248263
0.1067450872115299947930813212844890209826739485566734791381611341
0.0460363570893993956711030663945630687463903360129884815186150830
0.0178016129487114149497686423491821826727222724936916925074848287
0.0071983230878186774757409564853072107404253865202812786723658611
0.0028595431335448830597671769632170026509214663654850979684389446
0.0011445954893036788003639337088830605746123841713446585986349367
0.0004563536098203040909478223754049603277040536851393338669565895
0.0001822719524293544779650310646451928999416207161846817907331572
0.0000727961706014385444931644908440438684024904105686253256247795
0.0000290649132807701000072417980742919261050941861519588494422745
0.0000115947606437938732267298243988518479907116369238904254508377
0.0000046267940672363425928462267793049244179105343755421417583501
0.0000018473786026249782208923313215110502805565076659712786924076
0.0000007366906002150524672424080570254061717383295277338037348612
length: 15
alpha
3.5829102525179525740116787536091339232011779385128686658496775077
4.4123999594278842862331667885439467372894814896956586388031481527
4.6035173292278363307344190384884514024972412704123104398046736497
4.6526865313590132722408371489623766911532990045499826624752456040
4.6630753571051853232283898805439240524509334135105469828892436051
4.6579397743645245527587870430282333155337005599083678723775494019
4.6711953450597358577013945648730389913223893175586327873489876261
4.6498602738818902968308869880784007905480946578652605312415683270
4.6594717059358959116984101469241531775184199419556172733186064436
4.6675311801758081105229477493991114456912947882431596952630205345
4.6623776846516496738278775836242700874039230269556913263766079537
4.6485556035133231238588184883686882794114257872077576139354535825
4.6508388967339276288841735117775914506779937117032607738607479509
4.6653444602433020078481687657252190997098914331562669384688990613
length: 14
delta
3.1133465073280445481915305962732409863913569780129971296645657103
2.3187127296853327908704593290705859336826160077802037763542416814
2.5860778583398970562436694511951604432988316267649367776977306734
2.4730222208053006444038852431397135758059261528046861297458373101
2.5172983066337416467554399620286588324178530857611682491807619244
2.4983001944944780869690388893838304152360137841571229311082520752
2.5081328703729987290541150751521087385086085283348500021425291001
2.5036962831523902279377535173929113151692655601489276494303176221
2.5038673177920234367851048082795894621464915929447075854089719937
2.5046064957503890757402342994030807290946721807078546724160810245
2.5067281829855774467392295961813048404240115381070729055278159423
2.5060031795881521643667033828770207855623442850309582863480416391
2.5045185976832446906702863275265250991824595100110704204251556104
2.5076722875053612852246114373206018684236837407276742340578813322
length: 14
"""


def to_table(text):
    li = [[], [], [], []]
    counter = 0
    is_digit = False
    for line in text.splitlines():
        if line == "":
            continue
        if line[0].isdigit():
            li[counter].append(line)
            is_digit = True
        else:
            if is_digit:
                counter += 1
            is_digit = False

    buf = ""
    for i in range(len(li[0])):
        buf += str(i) + " " + "& "
        for j in range(4):
            if len(li[j]) > i:
                buf += f"{li[j][i]:0.10}" + " "
            else:
                buf += " - "
            if j != 3:
                buf += "& "
        buf += r"\\"
        buf += "\n"

    print(buf)


to_table(text_logistic_skewed)
